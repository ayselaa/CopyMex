@model Mechanic.Web.Areas.Admin.ViewModels.User.UserVM

@{
    ViewData["Title"] = "CreateUser";
}


<div class="col-lg-12 grid-margin stretch-card">
    <div class="card">
        <div class="card-body">



            <div class="flex_table_top">
                <h4 class="card-title">CreateUser</h4>

            </div>

            @*<form  asp-controller="User" asp-action="CreateUser" method="post">
            <label for="Name">Name:</label>
            <input type="text" id="Name" name="Name">
            <br>

            <label for="Surname">Surname:</label>
            <input type="text" id="Surname" name="Surname">
            <br>

            <label for="SelectedRole">Selected Role:</label>
            <select id="SelectedRole" name="SelectedRole">
            <option value="Operator">Operator</option>
            <option value="Administrator">Administrator</option>
            <option value="Rehber">Rehber</option>
            </select>
            <br>

            <div id="generatedCredentials" style="display:none">
            <p>Generated Username: <span id="generatedUsername"></span></p>
            <p>Generated Password: <span id="generatedPassword"></span></p>
            </div>

            <input type="submit" value="Create">
            </form>*@

            @using (Html.BeginForm("CreateUser", "User", FormMethod.Post, new { id = "createUserForm" }))
            {
                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.Name, new { @class = "userLabel" })
                    </div>
                    <div>
                        @Html.TextBoxFor(model => model.Name, new { @id = "userInput" })
                    </div>
                </div>
                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.Surname, new { @class = "userLabel" })
                    </div>
                    <div>
                        @Html.TextBoxFor(model => model.Surname, new { @id = "userInput" })
                    </div>
                </div>
                @*  <div class="form-group">
            <div>
            @Html.LabelFor(model => model.SelectedRole)
            </div>
            @Html.DropDownListFor(model => model.SelectedRole, Enum.GetValues(typeof(Mechanic.Data.Entity.Enums.UserRoles)).Cast<Mechanic.Data.Entity.Enums.UserRoles>().Select(e => new SelectListItem { Text = e.ToString(), Value = e.ToString() }), "Select Role")
            </div>*@
                <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.SelectedRole)
                    </div>
                    @{
                        var roles = Enum.GetValues(typeof(Mechanic.Data.Entity.Enums.UserRoles))
                        .Cast<Mechanic.Data.Entity.Enums.UserRoles>()
                        .Where(r => r != Mechanic.Data.Entity.Enums.UserRoles.mechanizator); // mechanizator rolünü filtrele
                    }
                    @Html.DropDownListFor(model => model.SelectedRole, roles.Select(e => new SelectListItem { Text = e.ToString(), Value = e.ToString() }), "Select Role")
                </div>
                <input class="createitem" type="submit" value="Create" />
            }
            <!-- Custom Modal -->
            <div id="customModal" class="modal">
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <div id="generatedCredentials">
                        <p>Generated Username: <span id="generatedUsername"></span></p>
                        <p>Generated Password: <span id="generatedPassword"></span></p>
                    </div>
                </div>
            </div>
        </div>

        <script>
            document.addEventListener("DOMContentLoaded", function() {
                var createUserForm = document.getElementById("createUserForm");
                var customModal = document.getElementById("customModal");
                var generatedUsername = document.getElementById("generatedUsername");
                var generatedPassword = document.getElementById("generatedPassword");
                createUserForm.addEventListener("submit", function(event) {
                    event.preventDefault();
                    var formData = new FormData(createUserForm);
                    // AJAX call
                    var xhr = new XMLHttpRequest();
                    xhr.open("POST", "/admin/user/CreateUser");
                    xhr.onreadystatechange = function() {
                        if (xhr.readyState === XMLHttpRequest.DONE) {
                            if (xhr.status === 200) {
                                var response = JSON.parse(xhr.responseText);
                                generatedUsername.textContent = response.username;
                                generatedPassword.textContent = response.password;
                                customModal.style.display = "block";
                            } else {
                                alert('Error occurred while creating user.');
                            }
                        }
                    };
                    xhr.send(formData);
                });
                var closeBtn = document.getElementsByClassName("close")[0];
                closeBtn.addEventListener("click", function() {
                    customModal.style.display = "none";
                });
            });
        </script>


        <style>
            .modal {
                display: none;
                position: fixed;
                z-index: 9999;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                overflow: auto;
                padding: 1rem;
                background-color: rgba(0, 0, 0, 0.5);
            }

            .modal-content {
                background-color: #FEFEFE;
                margin: 15% auto;
                padding: 20px;
                border: 1px solid #888;
                width: 50%;
            }

            .close {
                color: #aaa;
                float: right;
                font-size: 28px;
                font-weight: bold;
            }

                .close:hover,
                .close:focus {
                    color: black;
                    text-decoration: none;
                    cursor: pointer;
                }

            #userInput {
                border: 1px solid #8080804a !important;
            }

            .createitem {
                background: #50bd0e;
                color: white;
                border: none;
                padding: 10px 15px;
                border-radius: 5px;
            }

                .createitem:hover {
                    background: #4aaf0d;
                }
        </style>
